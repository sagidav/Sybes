#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 24 01:41:22 2022

@author: danieldavidi
"""
import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


class Vector:
    def __init__(self, x=0.0, y=0.0, z=0.0):
        self.x = x
        self.y = y
        self.z = z
    def __repr__(self):
        return repr('Vector' +str(((self.x),(self.y),(self.z))))
    def __str__(self):
        r = str((self.x)) + "i" + ' + ' + str((self.y)) + "j" + ' + ' + str((self.z)) + "k"
        return r

    def __getitem__(self,item):
        if item == 0:
            return self.x
        elif item == 1:
            return self.y
        elif item == 2:
            return self.z
        else:
            raise IndexError("only 3 elements")
        
    
    def __add__(self,other):
        return Vector(self.x + other.x,self.y + other.y, self.z + other.z)
    def __sub__(self,other):
        return Vector(self.x - other.x,self.y - other.y, self.z - other.z)
    def __mul__(self,other):
        if isinstance(other,Vector):
            return (self.x * other.x,self.y * other.y, self.z * other.z)
        elif isinstance(other,(int,float)):
            return Vector(self.x * other,self.y * other, self.z * other)
        else:
            raise TypeError("must be scalar or vector")
    def __div__(self,other):
        if isinstance(other,(int,float)):
            return Vector(float(self.x) / other, float(self.y) / other, float(self.z) / other)
        else:
            raise TypeError("must be int,float")
    
    def get_magnitude(self):
        return math.sqrt(self.x ** 2 + self.y ** 2 + self.z **2)
    def normalize(self):
        mag = self.get_magnitude()
        return Vector(self.x/mag,self.y/mag,self.z/mag)
        

class Solarsystem:
    
    def __init__(self,size):
        self.size = size
        self.bodies = []
        
        self.fig, self.ax = plt.subplots(1,1,subplot_kw={"projection":"3d"},figsize=(self.size/ 50,self.size/50))
        self.fig.tight_layout()
        
    def add_body(self,body):
        self.bodies.append(body)
        
    def update_all(self):
        for b in self.bodies:
            b.move()
            b.draw()
    
    def draw_all(self):
        self.ax.set_xlim((-self.size/2,self.size/2))
        self.ax.set_ylim((-self.size/2,self.size/2))
        self.ax.set_zlim((-self.size/2,self.size/2))
        plt.pause(0.001)
        self.ax.clear()

        
class SolarsystemBody:
    
    min_display_size = 10
    display_log_base = 1.3
    
    def __init__ (self,solar_system,mass,position=(0,0,0),velocity=(0,0,0)):
        self.solar_system = solar_system
        self.mass = mass
        self.position = position
        self.velocity = Vector(*velocity)
        self.solar_system.add_body(self)
        self.display_size = max (math.log(self.mass,self.display_log_base),self.min_display_size,)
        self.color = 'black'
        
    def move(self):
        self.position = (self.position[0] + self.velocity[0],self.position[1] + self.velocity[1],self.position[2] + self.velocity[2])
        
    def draw(self):
        self.solar_system.ax.plot(*self.position,marker ='o',markersize=self.display_size,color=self.color)

test = Vector(3,6,9)
print(test.get_magnitude())
print(test.normalize())
