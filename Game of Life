# -*- coding: utf-8 -*-
"""
Created on Tue May  2 11:14:58 2023

@author: Sagi.Davidi
"""

import random
import time
import numpy as np
import matplotlib.pyplot as plt

# Set up the initial configuration of the grid
def initialize_grid(width, height, density):
    grid = np.zeros((height, width))
    for i in range(height):
        for j in range(width):
            if random.random() < density:
                grid[i][j] = 1
    return grid

# Compute the next generation of cells
def compute_next_gen(grid):
    height, width = grid.shape
    new_grid = np.zeros((height, width))
    for i in range(height):
        for j in range(width):
            # Count the number of live neighbors
            neighbors = grid[max(0, i-1):min(i+2, height), max(0, j-1):min(j+2, width)]
            num_neighbors = int(np.sum(neighbors)) - int(grid[i][j])
            # Apply the Game of Life rules
            if grid[i][j] == 1 and (num_neighbors == 2 or num_neighbors == 3):
                new_grid[i][j] = 1
            elif grid[i][j] == 0 and num_neighbors == 3:
                new_grid[i][j] = 1
    return new_grid

# Display the grid
def display_grid(grid):
    plt.imshow(grid, cmap='binary')
    plt.show()

# Main function to run the Game of Life
def run_game_of_life(width, height, density, num_generations, display=True):
    grid = initialize_grid(width, height, density)
    for i in range(num_generations):
        if display:
            display_grid(grid)
            time.sleep(0.2)
        grid = compute_next_gen(grid)

# Example usage
run_game_of_life(50, 50, 0.1, 50)
