import numpy as np

def all_primes(num):
    a= np.arange(7,num)
    b = [2,3,5]
    for i in range(1,num-7):
        if a[i] % 2 == 0 or a[i] % 3 == 0 or a[i] % 5 == 0:
            a[i] = 0
        else:
            for j in range(7,int(num/2)+1):
                if a[i] % j == 0 and a[i]-j !=0:
                    a[i] = 0
    for k in a:
        if k != 0:
            b.append(k)
    return b

print(all_primes(100))

class prime:
    def __init__(self,num):
        self.num = num
        b1 =[]


class Block:
    def __init__(self,order):
        a = []
        self.order = int(order)
        for i in range(1+100*(int(order)-1),100*int(order),2):
            a.append(i)
        for i in a:
            if i%5==0:
                a.remove(i)
        x = np.array(a)
        x = x.reshape(10,4)
        self.array = x
      
    def render(self):
        y = self.array
        test = []
        order = self.order
        a1 = np.sqrt((order+1)*100)
        b1 = int(np.round(a1,0)+1)
        c1 = all_primes(b1)
        for k in c1:
            for i in range(10):
                for j in range(4):
                    if y[i,j] % k == 0:
                        y[i,j] = k
        return y

def Block_chain(order):
    x = Block(1)
    list_1 = []
    for i in range(1,int(order)+1):
        x1 = Block(i)
        x2 = x1.render()
        list_1.append(x2)
        x4 = np.concatenate(list_1)
    return list_1 , x4
            

#y = Block_chain(20)
y1 = Block(9)
y2 = y1.render()
print (y2)

def block_of_2(order):
    a = np.arange((order-1)*100+2,order*100+1,2)
    b = np.array(a,dtype=object)
    b = b.reshape(10,5)
    return b
print(block_of_2(9))

class num_to_factors:
    
    def __init__(self,num):
        a = []
        c1 = all_primes(num+1)
        
        for i in c1:
            a.append([i,0])
        self.primes = a
        
        x = int(num)
        c = []
        while x != 1:
            for j in range(len(a)):
                if x % a[j][0] == 0:
                    a[j][1] +=1
                    x = x / a[j][0]
                    pass
        for j in range(len(a)):
            if a[j][1] == 0:
                pass
            else:
                c.append(a[j])
        self.final = c
        
        d = '|'
        for k in c:
              d = d + str(k[0]) + 'X' + str(k[1]) + '|'
        self.final_str = d

def Board_all_numbers(num):
    
    p1 = all_primes(1000)
    a=['']
    b=[]
    for i in range(((num-1)*100+1),(num*100+1)):
        b.append([str(i)])
    c = np.array(b,dtype=object)
    
    c = c.reshape(10,10)

    
    for j in range(10):
        for k in range(10):
            if int(c[j][k]) in p1 or int(c[j][k])==1 or int(c[j][k])==2 :
                pass
            else:
                temp = int(c[j][k])
                temp1 = num_to_factors(temp)
                c[j][k] = temp1.final_str
    
    return c


#print (Board_all_numbers(4))
a1 = num_to_factors(79)
print(a1.final,a1.final_str)



