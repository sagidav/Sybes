#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 21 08:19:24 2022

@author: danieldavidi
"""
import numpy as np

def all_primes(num):
    a= np.arange(3,num)
    b = []
    b=[3,5,7]
    for i in range(3,num-3):
        if a[i] % 2 == 0 or a[i] % 3 == 0 or a[i] % 5 == 0:
            a[i] = 0
        else:
            for j in range(6,num/2+1):
                if a[i] % j == 0:
                    a[i] = 0
    for k in a:
        if k != 0:
            b.append(k)
    return b


class prime:
    def __init__(self,num):
        self.num = num
        b1 =[]


class Block:
    def __init__(self,order):
        a = []
        self.order = int(order)
        for i in range(1+100*(int(order)-1),100*int(order),2):
            a.append(i)
        for i in a:
            if i%5==0:
                a.remove(i)
        x = np.array(a)
        x = x.reshape(10,4)
        self.array = x
      
    def render(self):
        y = self.array
        test = []
        order = self.order
        a1 = np.sqrt((order+1)*100)
        b1 = int(np.round(a1,0)+1)
        c1 = all_primes(b1)
        for k in c1:
            for i in range(10):
                for j in range(4):
                    if y[i,j] % k == 0:
                        y[i,j] = k
        return y

def Block_chain(order):
    x = Block(1)
    list_1 = []
    for i in range(1,int(order)+1):
        x1 = Block(i)
        x2 = x1.render()
        list_1.append(x2)
        x4 = np.concatenate(list_1)
    return list_1 , x4
            

#y = Block_chain(20)
#y1 = Block(1)
#y2 = y1.render()
#print (y)

class num_to_factors:
    
    def __init__(self,num):
        a = []
        a1 = np.sqrt((num+1)*100)
        b1 = int(np.round(a1,0)+1)
        c1 = all_primes(b1)
        
        for i in c1:
            a.append((i,0))

def Board_all_numbers(num):
    
    a1 = all_primes(100)
    a = np.arange(1,num*100+1)
    x = np.array(a)
    x = x.reshape(10*num,10)
    return x,a1

print (Board_all_numbers(10))
        

        
for i in c1:
    a.append((i,0))
    b.append(str(i) + 'X' + '0')

#print(a,b)
        
a111 = np.arange(3,10,2)
#print a111
        
